{"version":3,"sources":["../src/queries.js"],"names":["Pool","require","pool","user","envVariables","DB_USER","host","DB_HOST","database","DB_NAME","password","DB_PASSWORD","port","DB_PORT","createJobKafkaTopic","KAFKA_CREATE_JOB_TOPIC","uuidv4","getFileStoreIds","jobid","tenantId","isconsolidated","entityid","callback","searchquery","queryparams","next","jobidPresent","undefined","length","push","trim","ifTrue","ifFalse","query","error","results","logger","stack","status","message","rows","searchresult","map","filestoreids","crow","tenantid","createdtime","endtime","totalcount","key","documentType","documenttype","moduleName","modulename","info","insertStoreIds","dbInsertRecords","starttime","successCallback","errorCallback","payloads","Date","getTime","id","topic","messages","JSON","stringify","jobs","producer","send","err","data","filestoreIds"],"mappings":"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","file":"queries.js","sourcesContent":["const Pool = require(\"pg\").Pool;\nimport logger from \"./config/logger\";\nimport producer from \"./kafka/producer\";\nimport consumer from \"./kafka/consumer\";\nimport envVariables from \"./EnvironmentVariables\";\n\nconst pool = new Pool({\n  user: envVariables.DB_USER,\n  host: envVariables.DB_HOST,\n  database: envVariables.DB_NAME,\n  password: envVariables.DB_PASSWORD,\n  port: envVariables.DB_PORT\n});\n\nlet createJobKafkaTopic = envVariables.KAFKA_CREATE_JOB_TOPIC;\nconst uuidv4 = require(\"uuid/v4\");\n\nexport const getFileStoreIds = (\n  jobid,\n  tenantId,\n  isconsolidated,\n  entityid,\n  callback\n) => {\n  var searchquery = \"\";\n  var queryparams = [];\n  var next = 1;\n  var jobidPresent = false;\n  searchquery = \"SELECT * FROM egov_pdf_gen WHERE\";\n\n  if (jobid != undefined && jobid.length > 0) {\n    searchquery += ` jobid = ANY ($${next++})`;\n    queryparams.push(jobid);\n    jobidPresent = true;\n  }\n\n  if (entityid != undefined && entityid.trim() !== \"\") {\n    if (jobidPresent) searchquery += \" and\";\n    searchquery += ` entityid = ($${next++})`;\n    queryparams.push(entityid);\n  }\n\n  if (tenantId != undefined && tenantId.trim() !== \"\") {\n    searchquery += ` and tenantid = ($${next++})`;\n    queryparams.push(tenantId);\n  }\n\n  if (isconsolidated != undefined && isconsolidated.trim() !== \"\") {\n    var ifTrue = isconsolidated === \"true\" || isconsolidated === \"True\";\n    var ifFalse = isconsolidated === \"false\" || isconsolidated === \"false\";\n    if (ifTrue || ifFalse) {\n      searchquery += ` and isconsolidated = ($${next++})`;\n      queryparams.push(ifTrue);\n    }\n  }\n  searchquery = `SELECT pdf_1.* FROM egov_pdf_gen pdf_1 INNER JOIN (SELECT entityid, max(endtime) as MaxEndTime from (`+searchquery+`) as pdf_2 group by entityid) pdf_3 ON pdf_1.entityid = pdf_3.entityid AND pdf_1.endtime = pdf_3.MaxEndTime`;\n  pool.query(searchquery, queryparams, (error, results) => {\n    if (error) {\n      logger.error(error.stack || error);\n      callback({\n        status: 400,\n        message: `error occured while searching records in DB : ${error.message}`\n      });\n    } else {\n      if (results && results.rows.length > 0) {\n        var searchresult = [];\n        results.rows.map(crow => {\n          searchresult.push({\n            filestoreids: crow.filestoreids,\n            jobid: crow.jobid,\n            tenantid: crow.tenantid,\n            createdtime: crow.createdtime,\n            endtime: crow.endtime,\n            totalcount: crow.totalcount,\n            key: crow.key,\n            documentType: crow.documenttype,\n            moduleName: crow.modulename\n          });\n        });\n        logger.info(results.rows.length + \" matching records found in search\");\n        callback({ status: 200, message: \"Success\", searchresult });\n      } else {\n        logger.error(\"no result found in DB search\");\n        callback({ status: 404, message: \"no matching result found\" });\n      }\n    }\n  });\n};\n\nexport const insertStoreIds = (\n  dbInsertRecords,\n  jobid,\n  filestoreids,\n  tenantId,\n  starttime,\n  successCallback,\n  errorCallback,\n  totalcount,\n  key,\n  documentType,\n  moduleName\n) => {\n  var payloads = [];\n  var endtime = new Date().getTime();\n  var id = uuidv4();\n  payloads.push({\n    topic: createJobKafkaTopic,\n    messages: JSON.stringify({ jobs: dbInsertRecords })\n  });\n  producer.send(payloads, function(err, data) {\n    if (err) {\n      logger.error(err.stack || err);\n      errorCallback({\n        message: `error while publishing to kafka: ${err.message}`\n      });\n    } else {\n      logger.info(\"jobid: \" + jobid + \": published to kafka successfully\");\n      successCallback({\n        message: \"Success\",\n        jobid: jobid,\n        filestoreIds: filestoreids,\n        tenantid: tenantId,\n        starttime,\n        endtime,\n        totalcount,\n        key,\n        documentType,\n        moduleName\n      });\n    }\n  });\n};\n"]}