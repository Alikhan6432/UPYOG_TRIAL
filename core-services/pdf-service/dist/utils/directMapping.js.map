{"version":3,"sources":["../../src/utils/directMapping.js"],"names":["jp","require","externalHost","envVariables","EGOV_EXTERNAL_HOST","escapeRegex","string","replace","directMapping","req","dataconfig","variableTovalueMap","requestInfo","unregisteredLocalisationCodes","directArr","localisationCodes","localisationModules","variableToModuleMap","objectOfDirectMapping","query","map","jPath","item","variable","val","value","path","valJsonPath","type","url","format","localisation","uCaseNeeded","isUpperCaseRequired","i","length","toUpperCase","fun","Function","console","log","undefined","axios","get","responseType","response","headers","Buffer","from","data","toString","logger","error","stack","message","arrayOfOwnerObject","scema","j","ownerObject","k","fieldValue","myDate","Date","isNaN","replaceValue","required","loc","prefix","isCategoryRequired","isMainTypeRequired","isSubTypeRequired","delimiter","includes","push","module","currentValue","arrayOfBuiltUpDetails","isOrderedList","arrayOfItems","Array","isArray","p","orderedList","stringBuildpDetails","JSON","stringify","substring","code","localisationMap","resposnseMap","messages","Errors","Object","keys","forEach","key","index","indexOf","splice","objectKey","objectItemkey"],"mappings":"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","file":"directMapping.js","sourcesContent":["import get from \"lodash/get\";\nimport logger from \"../config/logger\";\nimport axios from \"axios\";\nimport envVariables from \"../EnvironmentVariables\";\nimport {\n  getLocalisationkey,\n  findLocalisation,\n  getDateInRequiredFormat,\n  getValue\n} from \"./commons\";\n\nvar jp = require(\"jsonpath\");\n\nlet externalHost = envVariables.EGOV_EXTERNAL_HOST;\n/**\n *\n * @param {*} req - current module object, picked from request body\n * @param {*} dataconfig  - data config\n * @param {*} variableTovalueMap - map used for filling values by template engine 'mustache'\n * @param {*} localisationMap - Map to store localisation key, value pair\n * @param {*} requestInfo - request info from request body\n */\n\nfunction escapeRegex(string) {\n  if(typeof string == \"string\")\n  return string.replace(/[\\\\\"]/g, '\\\\$&'); \n   else\n    return string;\n  }\n\nexport const directMapping = async (\n  req,\n  dataconfig,\n  variableTovalueMap,\n  requestInfo,\n  unregisteredLocalisationCodes\n) => {\n  var directArr = [];\n  var localisationCodes = [];\n  var localisationModules = [];\n  var variableToModuleMap = {};\n  // using jp-jsonpath because loadash can not handele '*'\n  var objectOfDirectMapping = jp.query(\n    dataconfig,\n    \"$.DataConfigs.mappings.*.mappings.*.direct.*\"\n  );\n  // console.log(\"Reading direct mapping values---\");\n  objectOfDirectMapping = getValue(\n    objectOfDirectMapping,\n    [],\n    \"$.DataConfigs.mappings.*.mappings.*.direct.*\"\n  );\n  // console.log(\"Completed Reading direct mapping values---\");\n  directArr = objectOfDirectMapping.map(item => {\n    //console.log(\"item.variable=\"+item.variable+\" item.value=\"+item.value+\" item.url=\"+item.url+\" item.type=\"+item.type)\n    return {\n      jPath: item.variable,\n      val:\n        item.value &&\n        getValue(jp.query(req, item.value.path), \"NA\", item.value.path),\n      valJsonPath: item.value && item.value.path,\n      type: item.type,\n      url: item.url,\n      format: item.format,\n      localisation: item.localisation,\n      uCaseNeeded: item.isUpperCaseRequired\n    };\n  });\n\n  for (var i = 0; i < directArr.length; i++) {\n    //for array type direct mapping\n    if (directArr[i].type == \"citizen-employee-title\") {\n      if (get(requestInfo, \"userInfo.type\", \"NA\").toUpperCase() == \"EMPLOYEE\") {\n        variableTovalueMap[directArr[i].jPath] = \"Employee Copy\";\n      } else {\n        variableTovalueMap[directArr[i].jPath] = \"Citizen Copy\";\n      }\n    }\n    if (directArr[i].type == \"selectFromRequestInfo\") {\n      directArr[i].val = getValue(\n        jp.query(requestInfo, directArr[i].valJsonPath),\n        \"NA\",\n        directArr[i].valJsonPath\n      );\n\n      if (typeof directArr[i].val == \"object\" && directArr[i].val.length > 0)\n        directArr[i].val = directArr[i].val[0];\n\n      variableTovalueMap[directArr[i].jPath] = directArr[i].val;\n    } \n    else if (directArr[i].type == \"external_host\") {\n      variableTovalueMap[directArr[i].jPath] = externalHost;\n    }\n    else if (directArr[i].type == \"function\") {\n      var fun = Function(\"type\", directArr[i].format);\n      variableTovalueMap[directArr[i].jPath] = fun(directArr[i].val[0]);\n    } else if (directArr[i].type == \"image\") {\n      try {\n        console.log(\"url ------ > \");\n        console.log( directArr[i]);\n        if(directArr[i].val!=undefined){\n        console.log( directArr[i].val.length);\n        }\n        if(directArr[i].url==undefined&&directArr[i].val!=undefined&&directArr[i].val.length==1){\n          directArr[i].url=directArr[i].val[0];\n        }\n        var response = await axios.get(directArr[i].url, {\n          responseType: \"arraybuffer\"\n        });\n        variableTovalueMap[directArr[i].jPath] =\n          \"data:\" +\n          response.headers[\"content-type\"] +\n          \";base64,\" +\n          Buffer.from(response.data).toString(\"base64\");\n        //  logger.info(\"loaded image: \"+directArr[i].url);\n      } catch (error) {\n        logger.error(error.stack || error);\n        throw {\n          message: `error while loading image from: ${directArr[i].url}`\n        };\n      }\n    } else if (directArr[i].type == \"array\") {\n      let arrayOfOwnerObject = [];\n      // let ownerObject = JSON.parse(JSON.stringify(get(formatconfig, directArr[i].jPath + \"[0]\", [])));\n\n      let { format = {}, val = [], variable } = directArr[i];\n      let { scema = [] } = format;\n\n      //taking values about owner from request body\n      for (let j = 0; j < val.length; j++) {\n        // var x = 1;\n        let ownerObject = {};\n        for (let k = 0; k < scema.length; k++) {\n          let fieldValue = get(val[j], scema[k].value, \"NA\");\n          fieldValue = fieldValue == null ? \"NA\" : fieldValue;\n          if (scema[k].type == \"date\") {\n            let myDate = new Date(fieldValue);\n            if (isNaN(myDate) || fieldValue === 0) {\n              ownerObject[scema[k].variable] = \"NA\";\n            } else {\n              let replaceValue = getDateInRequiredFormat(fieldValue,scema[k].format);\n              // set(formatconfig,externalAPIArray[i].jPath[j].variable,replaceValue);\n              ownerObject[scema[k].variable] = replaceValue;\n            }\n          } else {\n            if (\n              fieldValue !== \"NA\" &&\n              scema[k].localisation &&\n              scema[k].localisation.required\n            ) {\n              let loc = scema[k].localisation;\n              fieldValue = await getLocalisationkey(\n                loc.prefix,\n                fieldValue,\n                loc.isCategoryRequired,\n                loc.isMainTypeRequired,\n                loc.isSubTypeRequired,\n                loc.delimiter\n              );\n              if(!localisationCodes.includes(fieldValue))\n                localisationCodes.push(fieldValue);\n\n              if(!localisationModules.includes(loc.module))\n                localisationModules.push(loc.module);\n\n              variableToModuleMap[scema[k].variable] = loc.module;\n            }\n            let currentValue = fieldValue;\n            if (typeof currentValue == \"object\" && currentValue.length > 0)\n              currentValue = currentValue[0];\n\n            currentValue= escapeRegex(currentValue);\n            ownerObject[scema[k].variable] = currentValue;\n          }\n          // set(ownerObject[x], \"text\", get(val[j], scema[k].key, \"\"));\n          // x += 2;\n        }\n        arrayOfOwnerObject.push(ownerObject);\n      }\n      // set(formatconfig, directArr[i].jPath, arrayOfOwnerObject);\n      variableTovalueMap[directArr[i].jPath] = arrayOfOwnerObject;\n    }\n\n    //setting value in pdf for array-column type direct mapping\n    else if (directArr[i].type == \"array-column\") {\n      let arrayOfBuiltUpDetails = [];\n      let isOrderedList = false;\n      // let arrayOfFields=get(formatconfig, directArr[i].jPath+\"[0]\",[]);\n      // arrayOfBuiltUpDetails.push(arrayOfFields);\n\n      let { format = {}, val = [], variable } = directArr[i];\n      let { scema = [] } = format;\n      //to get data of multiple floor Built up details\n      for (let j = 0; j < val.length; j++) {\n        let arrayOfItems = [];\n        for (let k = 0; k < scema.length; k++) {\n          let fieldValue = get(val[j], scema[k].value, \"NA\");\n          fieldValue = fieldValue == null ? \"NA\" : fieldValue;\n          if (scema[k].type == \"date\") {\n            let myDate = new Date(fieldValue);\n            if (isNaN(myDate) || fieldValue === 0) {\n              arrayOfItems.push(\"NA\");\n            } else {\n              let replaceValue = getDateInRequiredFormat(fieldValue,scema[k].format);\n              // set(formatconfig,externalAPIArray[i].jPath[j].variable,replaceValue);\n              arrayOfItems.push(replaceValue);\n            }\n          } \n          /**\n           * This condition is for displaying the ordered list data \n           * when data is coming as array of strings instead of key value pair.\n           * Provided new scema type (array-orderedlist) which we should mention at data-config\n           * to display the array of string in order list.\n           */\n          else if (scema[k].type == \"array-orderedlist\" && Array.isArray(fieldValue)) {\n            if(fieldValue !== \"NA\") {\n              for (var p = 0; p < fieldValue.length; p++) {\n                let orderedList = [];\n                orderedList.push(fieldValue[p]);\n                arrayOfBuiltUpDetails.push(orderedList);\n              }\n              isOrderedList = true;\n            }\n          } else {\n            if (\n              fieldValue !== \"NA\" &&\n              scema[k].localisation &&\n              scema[k].localisation.required\n            ) {\n              let loc = scema[k].localisation;\n              fieldValue = await getLocalisationkey(\n                loc.prefix,\n                fieldValue,\n                loc.isCategoryRequired,\n                loc.isMainTypeRequired,\n                loc.isSubTypeRequired,\n                loc.delimiter\n              );\n              if(!localisationCodes.includes(fieldValue))\n                localisationCodes.push(fieldValue);\n\n              if(!localisationModules.includes(loc.module))\n                localisationModules.push(loc.module);\n            }\n            arrayOfItems.push(fieldValue);\n          }\n        }\n        if(isOrderedList === false)\n          arrayOfBuiltUpDetails.push(arrayOfItems);\n      }\n\n      // remove enclosing [ &  ]\n      let stringBuildpDetails = JSON.stringify(arrayOfBuiltUpDetails).replace(\n        \"[\",\n        \"\"\n      );\n      stringBuildpDetails = stringBuildpDetails.substring(\n        0,\n        stringBuildpDetails.length - 1\n      );\n\n      variableTovalueMap[directArr[i].jPath] = stringBuildpDetails;\n      // set(formatconfig,directArr[i].jPath,arrayOfBuiltUpDetails);\n    }\n    //setting value in pdf for no type direct mapping\n    else if (directArr[i].type == \"label\") {\n      let code = await getLocalisationkey(\n        directArr[i].localisation.prefix,\n        directArr[i].valJsonPath,\n        directArr[i].localisation.isCategoryRequired,\n        directArr[i].localisation.isMainTypeRequired,\n        directArr[i].localisation.isSubTypeRequired,\n        directArr[i].localisation.delimiter\n      );\n      if(!localisationCodes.includes(code))\n        localisationCodes.push(code);\n\n      if(!localisationModules.includes(directArr[i].localisation.module))\n        localisationModules.push(directArr[i].localisation.module);\n\n      variableTovalueMap[directArr[i].jPath] = code;\n      variableToModuleMap[directArr[i].jPath] = directArr[i].localisation.module;\n\n    } \n    \n    else if (directArr[i].type == \"date\") {\n      let myDate = new Date(directArr[i].val[0]);\n      if (isNaN(myDate) || directArr[i].val[0] === 0) {\n        variableTovalueMap[directArr[i].jPath] = \"NA\";\n      } else {\n        let replaceValue = getDateInRequiredFormat(directArr[i].val[0],directArr[i].format);\n        variableTovalueMap[directArr[i].jPath] = replaceValue;\n      }\n    } \n\n    else {\n      directArr[i].val = getValue(\n        directArr[i].val,\n        \"NA\",\n        directArr[i].valJsonPath\n      );\n      if (\n        directArr[i].val !== \"NA\" &&\n        directArr[i].localisation &&\n        directArr[i].localisation.required\n      ){\n\n        let code = await getLocalisationkey(\n          directArr[i].localisation.prefix,\n          directArr[i].val,\n          directArr[i].localisation.isCategoryRequired,\n          directArr[i].localisation.isMainTypeRequired,\n          directArr[i].localisation.isSubTypeRequired,\n          directArr[i].localisation.delimiter\n        );\n\n        if (typeof code == \"object\" && code.length > 0)\n          code = code[0];\n\n        if(!localisationCodes.includes(code))\n          localisationCodes.push(code);\n\n        if(!localisationModules.includes(directArr[i].localisation.module))\n          localisationModules.push(directArr[i].localisation.module);\n\n        variableTovalueMap[directArr[i].jPath] = code;\n\n        variableToModuleMap[directArr[i].jPath] = directArr[i].localisation.module;\n\n      }\n        \n      else{\n        let currentValue = directArr[i].val;\n          if (typeof currentValue == \"object\" && currentValue.length > 0)\n            currentValue = currentValue[0];\n          \n         // currentValue=currentValue.replace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"');\n        currentValue= escapeRegex(currentValue);\n        variableTovalueMap[directArr[i].jPath] = currentValue;\n      } \n      if (directArr[i].uCaseNeeded) {\n        let currentValue = variableTovalueMap[directArr[i].jPath];\n        if (typeof currentValue == \"object\" && currentValue.length > 0)\n          currentValue = currentValue[0];\n        variableTovalueMap[directArr[i].jPath] = currentValue.toUpperCase();\n      }\n    }\n  }\n\n  let localisationMap = [];\n  try{\n    let resposnseMap = await findLocalisation(\n      requestInfo,\n      localisationModules,\n      localisationCodes\n    );\n  \n    resposnseMap.messages.map((item) => {\n      localisationMap[item.code + \"_\" + item.module] = item.message;\n    });\n  }\n  catch (error) {\n    logger.error(error.stack || error);\n    throw{\n      message: `Error in localisation service call: ${error.Errors[0].message}`\n    }; \n  }\n\n  \n  \n\n  Object.keys(variableTovalueMap).forEach(function(key) {\n    if(variableToModuleMap[key] && typeof variableTovalueMap[key] == 'string'){\n      var code = variableTovalueMap[key];\n      var module = variableToModuleMap[key];\n      if(localisationMap[code+\"_\"+module]){\n        variableTovalueMap[key] = localisationMap[code+\"_\"+module];\n        if(unregisteredLocalisationCodes.includes(code)){\n          var index = unregisteredLocalisationCodes.indexOf(code);\n          unregisteredLocalisationCodes.splice(index, 1);\n        }\n      }\n      else{\n        if(!unregisteredLocalisationCodes.includes(code))\n          unregisteredLocalisationCodes.push(code);\n      }\n    }\n\n    if(typeof variableTovalueMap[key] =='object'){\n      Object.keys(variableTovalueMap[key]).forEach(function(objectKey){\n        Object.keys(variableTovalueMap[key][objectKey]).forEach(function(objectItemkey) {\n          if(variableToModuleMap[objectItemkey]){\n            var module = variableToModuleMap[objectItemkey];\n            var code = variableTovalueMap[key][objectKey][objectItemkey];\n            if(localisationMap[code+\"_\"+module]){\n              variableTovalueMap[key][objectKey][objectItemkey] = localisationMap[code+\"_\"+module];\n              if(unregisteredLocalisationCodes.includes(code)){\n                var index = unregisteredLocalisationCodes.indexOf(code);\n                unregisteredLocalisationCodes.splice(index, 1);\n              }\n            }\n            else{\n              if(!unregisteredLocalisationCodes.includes(code))\n                unregisteredLocalisationCodes.push(code);\n            }\n          }\n        });\n      });    \n    }\n\n  });\n  \n};\n"]}