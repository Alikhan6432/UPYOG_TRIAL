{"version":3,"sources":["../src/index.js"],"names":["pdfmake","pdfFonts","jp","require","pdfMake","vfs","pdfMakePrinter","app","use","express","static","path","join","__dirname","bodyParser","json","limit","extended","urlencoded","maxPagesAllowed","envVariables","MAX_NUMBER_PAGES","serverport","SERVER_PORT","dataConfigUrls","DATA_CONFIG_URLS","formatConfigUrls","FORMAT_CONFIG_URLS","dataConfigMap","formatConfigMap","topicKeyMap","topic","datafileLength","split","length","unregisteredLocalisationCodes","fontDescriptors","Cambay","normal","bold","italics","bolditalics","Roboto","BalooBhaina","BalooPaaji","Times","NotoSansMalayalam","Meera","Thumba","defaultFontMapping","en_IN","ml_IN","printer","uuidv4","mustache","escape","text","borderLayout","hLineColor","i","node","vLineColor","hLineWidth","vLineWidth","createPdfBinary","key","listDocDefinition","entityIds","formatconfig","successCallback","errorCallback","tenantId","starttime","totalobjectcount","userid","documentType","moduleName","noOfDefinitions","jobid","Date","getTime","logger","error","message","dbInsertSingleRecords","dbInsertBulkRecords","process","nextTick","uploadFiles","err","stack","isconsolidated","convertedListDocDefinition","listOfFilestoreIds","forEach","docDefinition","defn","formatobject","JSON","parse","stringify","console","log","push","objectCopy","footer","doc","createPdfKitDocument","fileNameAppend","filename","chunks","on","chunk","data","Buffer","concat","then","result","id","createdby","modifiedby","entityid","filestoreids","createdtime","endtime","totalcount","catch","end","post","req","res","requestInfo","body","createAndSave","response","status","ResponseInfo","filestoreIds","tenantid","query","dataconfig","info","valid","validateRequest","prepareBegin","formatConfigByFile","writeHead","from","undefined","trim","includes","responseBody","resposnseMap","messages","map","item","code","index","indexOf","splice","replace","fs","readFile","fromTopic","axios","get","config","listen","formatconfigNew","defaultStyle","locale","msgId","DEFAULT_LOCALISATION_LOCALE","font","updateBorderlayout","content","hasOwnProperty","layout","Object","keys","fillValues","variableTovalueMap","input","output","render","generateQRCodes","moduleObject","qrcodeMappings","len","qrmapping","varname","variable","qrtext","value","QRCode","toDataURL","qrCodeImage","handleDerivedMapping","derivedMappings","mapping","expression","formula","Function","errorMessage","userInfo","returnFileInResponse","baseKeyPath","entityIdPath","prepareBulk","handlelogic","formatObject","isCommonTableBorderRequired","Promise","all","formatObjectArrayObject","countOfObjectsInCurrentFile","moduleObjectsArray","Array","isArray","entityKey","formatconfigCopy"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nimport http from \"http\";\nimport request from \"request\";\nimport express from \"express\";\nimport logger from \"./config/logger\";\nimport path from \"path\";\nimport fs, {\n  exists\n} from \"fs\";\nimport axios from \"axios\";\nimport cors from \"cors\";\nimport morgan from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport asyncHandler from \"express-async-handler\";\nimport * as pdfmake from \"pdfmake/build/pdfmake\";\nimport * as pdfFonts from \"pdfmake/build/vfs_fonts\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport {\n  strict\n} from \"assert\";\nimport {\n  Recoverable\n} from \"repl\";\nimport {\n  fileStoreAPICall\n} from \"./utils/fileStoreAPICall\";\nimport {\n  directMapping\n} from \"./utils/directMapping\";\nimport {\n  externalAPIMapping\n} from \"./utils/externalAPIMapping\";\nimport envVariables from \"./EnvironmentVariables\";\nimport QRCode from \"qrcode\";\nimport {\n  getValue\n} from \"./utils/commons\";\nimport {\n  getFileStoreIds,\n  insertStoreIds\n} from \"./queries\";\nimport {\n  listenConsumer\n} from \"./kafka/consumer\";\nimport {\n  convertFooterStringtoFunctionIfExist,\n  findLocalisation\n} from \"./utils/commons\";\n\nvar jp = require(\"jsonpath\");\n//create binary\npdfMake.vfs = pdfFonts.pdfMake.vfs;\nvar pdfMakePrinter = require(\"pdfmake/src/printer\");\n\nlet app = express();\napp.use(express.static(path.join(__dirname, \"public\")));\napp.use(bodyParser.json({\n  limit: \"10mb\",\n  extended: true\n}));\napp.use(bodyParser.urlencoded({\n  limit: \"10mb\",\n  extended: true\n}));\n\nlet maxPagesAllowed = envVariables.MAX_NUMBER_PAGES;\nlet serverport = envVariables.SERVER_PORT;\n\nlet dataConfigUrls = envVariables.DATA_CONFIG_URLS;\nlet formatConfigUrls = envVariables.FORMAT_CONFIG_URLS;\n\nlet dataConfigMap = {};\nlet formatConfigMap = {};\n\nlet topicKeyMap = {};\nvar topic = [];\nvar datafileLength = dataConfigUrls.split(\",\").length;\nlet unregisteredLocalisationCodes = [];\n\nvar fontDescriptors = {\n  Cambay: {\n    normal: \"src/fonts/Cambay-Regular.ttf\",\n    bold: \"src/fonts/Cambay-Bold.ttf\",\n    italics: \"src/fonts/Cambay-Italic.ttf\",\n    bolditalics: \"src/fonts/Cambay-BoldItalic.ttf\",\n  },\n  Roboto: {\n    bold: \"src/fonts/Roboto-Bold.ttf\",\n    normal: \"src/fonts/Roboto-Regular.ttf\",\n  },\n  BalooBhaina: {\n    normal: \"src/fonts/BalooBhaina2-Regular.ttf\",\n    bold: \"src/fonts/BalooBhaina2-Bold.ttf\"\n  },\n  BalooPaaji:{\n    normal: \"src/fonts/BalooPaaji2-Regular.ttf\",\n    bold: \"src/fonts/BalooPaaji2-Bold.ttf\"\n  },\n  Times:{\n    normal: \"src/fonts/TimesNewRoman.ttf\",\n    bold: \"src/fonts/TimesNewRoman-Bold.ttf\",\n    italics: \"src/fonts/TimesNewRoman-Italic.ttf\",\n    bolditalics: \"src/fonts/TimesNewRoman-BoldItalic.ttf\",\n  },\n  NotoSansMalayalam:{\n    normal: \"src/fonts/NotoSansMalayalam-Regular.ttf\",\n    bold: \"src/fonts/NotoSansMalayalam-Bold.ttf\"\n  },\n  Meera:{\n    normal: \"src/fonts/Meera.ttf\",\n    bold: \"src/fonts/Meera.ttf\",\n    italics: \"src/fonts/Meera.ttf\",\n    bolditalics: \"src/fonts/Meera.ttf\",\n  },\n  Thumba:{\n    normal: \"src/fonts/THUMBA.ttf\",\n    bold: \"src/fonts/THUMBA-Bold.ttf\",\n    italics: \"src/fonts/THUMBA_ITALIC.ttf\",\n    bolditalics: \"src/fonts/THUMBA-BoldItalic.ttf\",\n  }\n};\n\nvar defaultFontMapping = {\n  en_IN: 'default',\n  ml_IN: 'default'\n}\n\nconst printer = new pdfMakePrinter(fontDescriptors);\nconst uuidv4 = require(\"uuid/v4\");\n\nlet mustache = require(\"mustache\");\nmustache.escape = function (text) {\n  return text;\n};\nlet borderLayout = {\n  hLineColor: function (i, node) {\n    return \"#979797\";\n  },\n  vLineColor: function (i, node) {\n    return \"#979797\";\n  },\n  hLineWidth: function (i, node) {\n    return 0.5;\n  },\n  vLineWidth: function (i, node) {\n    return 0.5;\n  },\n};\n\n/**\n *\n * @param {*} key - name of the key used to identify module configs. Provided request URL\n * @param {*} listDocDefinition - doc definitions as per pdfmake and formatconfig, each for each file\n * @param {*} successCallback - callaback when success\n * @param {*} errorCallback - callback when error\n * @param {*} tenantId - tenantID\n */\nconst createPdfBinary = async (\n  key,\n  listDocDefinition,\n  entityIds,\n  formatconfig,\n  successCallback,\n  errorCallback,\n  tenantId,\n  starttime,\n  totalobjectcount,\n  userid,\n  documentType,\n  moduleName\n) => {\n  try {\n    let noOfDefinitions = listDocDefinition.length;\n\n    var jobid = `${key}${new Date().getTime()}`;\n    if (noOfDefinitions == 0) {\n      logger.error(\"no file generated for pdf\");\n      errorCallback({\n        message: \" error: no file generated for pdf\"\n      });\n    } else {\n      var dbInsertSingleRecords = [];\n      var dbInsertBulkRecords = [];\n      // instead of awaiting the promise, use process.nextTick to asynchronously upload the receipt\n      //\n      process.nextTick(function () {\n        uploadFiles(\n            dbInsertSingleRecords,\n            dbInsertBulkRecords,\n            formatconfig,\n            listDocDefinition,\n            key,\n            false,\n            jobid,\n            noOfDefinitions,\n            entityIds,\n            starttime,\n            successCallback,\n            errorCallback,\n            tenantId,\n            totalobjectcount,\n            userid,\n            documentType,\n            moduleName\n          ),\n          uploadFiles(\n            dbInsertSingleRecords,\n            dbInsertBulkRecords,\n            formatconfig,\n            listDocDefinition,\n            key,\n            true,\n            jobid,\n            noOfDefinitions,\n            entityIds,\n            starttime,\n            successCallback,\n            errorCallback,\n            tenantId,\n            totalobjectcount,\n            userid,\n            documentType,\n            moduleName\n          )\n      });\n    }\n  } catch (err) {\n    logger.error(err.stack || err);\n    errorCallback({\n      message: ` error occured while creating pdf: ${\n        typeof err === \"string\" ? err : err.message\n      }`,\n    });\n  }\n};\n\nconst uploadFiles = async (\n  dbInsertSingleRecords,\n  dbInsertBulkRecords,\n  formatconfig,\n  listDocDefinition,\n  key,\n  isconsolidated,\n  jobid,\n  noOfDefinitions,\n  entityIds,\n  starttime,\n  successCallback,\n  errorCallback,\n  tenantId,\n  totalobjectcount,\n  userid,\n  documentType,\n  moduleName\n) => {\n  let convertedListDocDefinition = [];\n  let listOfFilestoreIds = [];\n\n  if (!isconsolidated) {\n    listDocDefinition.forEach((docDefinition) => {\n      docDefinition[\"content\"].forEach((defn) => {\n        var formatobject = JSON.parse(JSON.stringify(formatconfig));\n        console.log(formatobject);\n        formatobject[\"content\"] = defn;\n        convertedListDocDefinition.push(formatobject);\n      });\n    });\n  } else {\n    convertedListDocDefinition = [...listDocDefinition];\n  }\n\n  convertedListDocDefinition.forEach(function (docDefinition, i) {\n    // making copy because createPdfKitDocument function modifies passed object and this object is used\n    // in multiple places\n    var objectCopy = JSON.parse(JSON.stringify(docDefinition));\n    // restoring footer because JSON.stringify destroys function() values\n    console.log(\"format footer-------\")\n    console.log( formatconfig.footer)\n    objectCopy.footer = convertFooterStringtoFunctionIfExist(\n      formatconfig.footer\n    );\n    const doc = printer.createPdfKitDocument(objectCopy);\n    let fileNameAppend = \"-\" + new Date().getTime();\n    // let filename=\"src/pdfs/\"+key+\" \"+fileNameAppend+\".pdf\"\n    let filename = key + \"\" + fileNameAppend + \".pdf\";\n    //reference link\n    //https://medium.com/@kainikhil/nodejs-how-to-generate-and-properly-serve-pdf-6835737d118e#d8e5\n\n    //storing file on local computer/server\n\n    var chunks = [];\n\n    doc.on(\"data\", function (chunk) {\n      chunks.push(chunk);\n    });\n    doc.on(\"end\", function () {\n      // console.log(\"enddddd \"+cr++);\n      var data = Buffer.concat(chunks);\n      fileStoreAPICall(filename, tenantId, data)\n        .then((result) => {\n          listOfFilestoreIds.push(result);\n          if (!isconsolidated) {\n            dbInsertSingleRecords.push({\n              jobid,\n              id: uuidv4(),\n              createdby: userid,\n              modifiedby: userid,\n              entityid: entityIds[i],\n              isconsolidated: false,\n              filestoreids: [result],\n              tenantId,\n              createdtime: starttime,\n              endtime: new Date().getTime(),\n              totalcount: 1,\n              key,\n              documentType,\n              moduleName,\n            });\n\n            // insertStoreIds(jobid,entityIds[i],[result],tenantId,starttime,successCallback,errorCallback,1,false);\n          } else if (\n            isconsolidated &&\n            listOfFilestoreIds.length == noOfDefinitions\n          ) {\n            // insertStoreIds(\"\",);\n            // logger.info(\"PDF uploaded to filestore\");\n            dbInsertBulkRecords.push({\n              jobid,\n              id: uuidv4(),\n              createdby: userid,\n              modifiedby: userid,\n              entityid: null,\n              isconsolidated: true,\n              filestoreids: listOfFilestoreIds,\n              tenantId,\n              createdtime: starttime,\n              endtime: new Date().getTime(),\n              totalcount: totalobjectcount,\n              key,\n              documentType,\n              moduleName\n            });\n          }\n          if (\n            dbInsertSingleRecords.length == totalobjectcount &&\n            dbInsertBulkRecords.length == 1\n          ) {\n            insertStoreIds(\n              dbInsertSingleRecords.concat(dbInsertBulkRecords),\n              jobid,\n              listOfFilestoreIds,\n              tenantId,\n              starttime,\n              successCallback,\n              errorCallback,\n              totalobjectcount,\n              key,\n              documentType,\n              moduleName\n            );\n          }\n        })\n        .catch((err) => {\n          logger.error(err.stack || err);\n          errorCallback({\n            message: \"error occurred while uploading pdf: \" + (typeof err === \"string\") ?\n              err :\n              err.message,\n          });\n        });\n    });\n    doc.end();\n  });\n};\n\napp.post(\n  \"/pdf-service/v1/_create\",\n  asyncHandler(async (req, res) => {\n    let requestInfo;\n    try {\n      requestInfo = get(req.body, \"RequestInfo\");\n      await createAndSave(\n        req,\n        res,\n        (response) => {\n          // doc successfully created\n          res.status(201);\n          res.json({\n            ResponseInfo: requestInfo,\n            message: response.message,\n            filestoreIds: response.filestoreIds,\n            jobid: response.jobid,\n            createdtime: response.starttime,\n            endtime: response.endtime,\n            tenantid: response.tenantid,\n            totalcount: response.totalcount,\n            key: response.key,\n            documentType: response.documentType,\n            moduleName: response.moduleName,\n          });\n        },\n        (error) => {\n          res.status(400);\n          // doc creation error\n          res.json({\n            ResponseInfo: requestInfo,\n            message: \"error in createPdfBinary \" + error.message,\n          });\n        }\n      );\n      //\n    } catch (error) {\n      logger.error(error.stack || error);\n      res.status(400);\n      res.json({\n        ResponseInfo: requestInfo,\n        message: \"some unknown error while creating: \" + error.message,\n      });\n    }\n  })\n);\n\napp.post(\n  \"/pdf-service/v1/_createnosave\",\n  asyncHandler(async (req, res) => {\n    let requestInfo;\n    try {\n      var starttime = new Date().getTime();\n      let key = req.query.key;\n      let tenantId = req.query.tenantId;\n      var formatconfig = formatConfigMap[key];\n      console.log(\"printing format config--------\")\n      console.log(formatconfig)\n      var dataconfig = dataConfigMap[key];\n      logger.info(\"received createnosave request on key: \" + key);\n      requestInfo = get(req.body, \"RequestInfo\");\n      //\n\n      var valid = validateRequest(req, res, key, tenantId, requestInfo);\n\n      if (valid) {\n        let [\n          formatConfigByFile,\n          totalobjectcount,\n          entityIds,\n        ] = await prepareBegin(\n          key,\n          req,\n          requestInfo,\n          true,\n          formatconfig,\n          dataconfig\n        );\n        // restoring footer function\n        console.log(\"---footer\")\n        console.log(formatconfig.footer)\n        formatConfigByFile[0].footer = convertFooterStringtoFunctionIfExist(formatconfig.footer);\n        const doc = printer.createPdfKitDocument(formatConfigByFile[0]);\n        let fileNameAppend = \"-\" + new Date().getTime();\n        let filename = key + \"\" + fileNameAppend + \".pdf\";\n\n        var chunks = [];\n        doc.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        doc.on(\"end\", function () {\n          // console.log(\"enddddd \"+cr++);\n          var data = Buffer.concat(chunks);\n          res.writeHead(201, {\n            // 'Content-Type': mimetype,\n            \"Content-disposition\": \"attachment;filename=\" + filename,\n            \"Content-Length\": data.length,\n          });\n          logger.info(\n            `createnosave success for pdf with key: ${key}, entityId ${entityIds}`\n          );\n          res.end(Buffer.from(data, \"binary\"));\n        });\n        doc.end();\n      }\n    } catch (error) {\n      logger.error(error.stack || error);\n      res.status(400);\n      res.json({\n        message: \"some unknown error while creating: \" + error.message,\n      });\n    }\n  })\n);\n\napp.post(\n  \"/pdf-service/v1/_search\",\n  asyncHandler(async (req, res) => {\n    let requestInfo;\n    try {\n      let tenantid = req.query.tenantid;\n      let jobid = req.query.jobid;\n      let isconsolidated = req.query.isconsolidated;\n      let entityid = req.query.entityid;\n      requestInfo = get(req.body, \"RequestInfo\");\n      if (\n        (jobid == undefined || jobid.trim() == \"\") &&\n        (entityid == undefined || entityid.trim() == \"\")\n      ) {\n        res.status(400);\n        res.json({\n          ResponseInfo: requestInfo,\n          message: \"jobid and entityid both can not be empty\",\n        });\n      } else {\n        if (jobid) {\n          if (jobid.includes(\",\")) {\n            jobid = jobid.split(\",\");\n          } else {\n            jobid = [jobid];\n          }\n        }\n\n        getFileStoreIds(\n          jobid,\n          tenantid,\n          isconsolidated,\n          entityid,\n          (responseBody) => {\n            // doc successfully created\n            res.status(responseBody.status);\n            delete responseBody.status;\n            res.json({\n              ResponseInfo: requestInfo,\n              ...responseBody\n            });\n          }\n        );\n      }\n    } catch (error) {\n      logger.error(error.stack || error);\n      res.status(400);\n      res.json({\n        ResponseInfo: requestInfo,\n        message: \"some unknown error while searching: \" + error.message,\n      });\n    }\n  })\n);\n\napp.post(\n  \"/pdf-service/v1/_getUnrigesteredCodes\",\n  asyncHandler(async (req, res) => {\n    let requestInfo;\n    try {\n      requestInfo = get(req.body, \"RequestInfo\");\n      res.status(200);\n      res.json({\n          ResponseInfo: requestInfo,\n          unregisteredLocalisationCodes: unregisteredLocalisationCodes,\n        });\n    } catch (error) {\n      logger.error(error.stack || error);\n      res.status(400);\n      res.json({\n        ResponseInfo: requestInfo,\n        message: \"Error while retreving the codes\",\n      });\n    }\n  })\n\n);\n\napp.post(\n  \"/pdf-service/v1/_clearUnrigesteredCodes\",\n  asyncHandler(async (req, res) => {\n    let requestInfo;\n    try {\n      requestInfo = get(req.body, \"RequestInfo\");\n      let resposnseMap = await findLocalisation(\n        requestInfo,\n        [],\n        unregisteredLocalisationCodes\n      );\n\n      resposnseMap.messages.map((item) => {\n        if(unregisteredLocalisationCodes.includes(item.code)){\n          var index = unregisteredLocalisationCodes.indexOf(item.code);\n          unregisteredLocalisationCodes.splice(index, 1);\n        }\n      });\n      res.status(200);\n      res.json({\n          ResponseInfo: requestInfo,\n          unregisteredLocalisationCodes: unregisteredLocalisationCodes,\n        });\n    } catch (error) {\n      logger.error(error.stack || error);\n      res.status(400);\n      res.json({\n        ResponseInfo: requestInfo,\n        message: \"Error while retreving the codes\",\n      });\n    }\n  })\n\n);\n\nvar i = 0;\ndataConfigUrls &&\n  dataConfigUrls.split(\",\").map((item) => {\n    item = item.trim();\n    if (item.includes(\"file://\")) {\n      item = item.replace(\"file://\", \"\");\n      fs.readFile(item, \"utf8\", function (err, data) {\n        try {\n          if (err) {\n            logger.error(\n              \"error when reading file for dataconfig: file:///\" + item\n            );\n            logger.error(err.stack);\n          } else {\n            data = JSON.parse(data);\n            dataConfigMap[data.key] = data;\n            if (data.fromTopic != null) {\n              topicKeyMap[data.fromTopic] = data.key;\n              topic.push(data.fromTopic);\n            }\n            i++;\n            if (i == datafileLength) {\n              listenConsumer(topic);\n            }\n            logger.info(\"loaded dataconfig: file:///\" + item);\n          }\n        } catch (error) {\n          logger.error(\"error in loading dataconfig: file:///\" + item);\n          logger.error(error.stack);\n        }\n      });\n    } else {\n      (async () => {\n        try {\n          var response = await axios.get(item);\n          dataConfigMap[response.data.key] = response.data;\n          logger.info(\"loaded dataconfig: \" + item);\n        } catch (error) {\n          logger.error(\"error in loading dataconfig: \" + item);\n          logger.error(error.stack);\n        }\n      })();\n    }\n  });\n\nformatConfigUrls &&\n  formatConfigUrls.split(\",\").map((item) => {\n    item = item.trim();\n    if (item.includes(\"file://\")) {\n      item = item.replace(\"file://\", \"\");\n      fs.readFile(item, \"utf8\", function (err, data) {\n        try {\n          if (err) {\n            logger.error(err.stack);\n            logger.error(\n              \"error when reading file for formatconfig: file:///\" + item\n            );\n          } else {\n            data = JSON.parse(data);\n            formatConfigMap[data.key] = data.config;\n            logger.info(\"loaded formatconfig: file:///\" + item);\n          }\n        } catch (error) {\n          logger.error(\"error in loading formatconfig: file:///\" + item);\n          logger.error(error.stack);\n        }\n      });\n    } else {\n      (async () => {\n        try {\n          var response = await axios.get(item);\n          formatConfigMap[response.data.key] = response.data.config;\n          logger.info(\"loaded formatconfig: \" + item);\n        } catch (error) {\n          logger.error(\"error in loading formatconfig: \" + item);\n          logger.error(error.stack);\n        }\n      })();\n    }\n  });\n\napp.listen(serverport, () => {\n  logger.info(`Server running at http:${serverport}/`);\n});\n\n/**\n *\n * @param {*} formatconfig - format config read from formatconfig file\n */\n\n// Create endpoint flow\n// createAndSave-> prepareBegin-->prepareBulk --> handlelogic-------------|\n// createPdfBinary<---prepareBegin <--createPdfBinary <------prepareBulk ---<\n\nexport const createAndSave = async (\n  req,\n  res,\n  successCallback,\n  errorCallback\n) => {\n  var starttime = new Date().getTime();\n\n  let topic = get(req, \"topic\");\n  let key;\n  if (topic != null && topicKeyMap[topic] != null) {\n    key = topicKeyMap[topic];\n  } else {\n    key = get(req.query || req, \"key\");\n  }\n  //let key = get(req.query || req, \"key\");\n  let tenantId = get(req.query || req, \"tenantId\");\n  var formatconfigNew = formatConfigMap[key];\n  var dataconfig = dataConfigMap[key];\n  var userid = get(req.body || req, \"RequestInfo.userInfo.id\");\n  var requestInfo = get(req.body || req, \"RequestInfo\");\n  var documentType = get(dataconfig, \"documentType\", \"\");\n  var moduleName = get(dataconfig, \"DataConfigs.moduleName\", \"\");\n  var formatconfig =JSON.parse(JSON.stringify(formatconfigNew))\n  console.log(formatconfig.defaultStyle);\n  var valid = validateRequest(req, res, key, tenantId, requestInfo);\n  if (valid) {\n    let [formatConfigByFile, totalobjectcount, entityIds] = await prepareBegin(\n      key,\n      req,\n      requestInfo,\n      false,\n      formatconfig,\n      dataconfig\n    );\n\n    // logger.info(`Applied templating engine on ${moduleObjectsArray.length} objects output will be in ${formatConfigByFile.length} files`);\n    logger.info(\n      `Applied templating engine on ${totalobjectcount} objects output will be in ${formatConfigByFile.length} files`\n    );\n    // var util = require('util');\n    // fs.writeFileSync('./data.txt', util.inspect(JSON.stringify(formatconfig)) , 'utf-8');\n    //function to download pdf automatically\n    let locale = requestInfo.msgId.split('|')[1];\n    if(!locale)\n      locale = envVariables.DEFAULT_LOCALISATION_LOCALE;\n\n    if(defaultFontMapping[locale] != 'default'){\n      formatconfig.defaultStyle.font = defaultFontMapping[locale];\n    }\n     \n\n      console.log(\" Font type selected :::: \" + formatconfig.defaultStyle.font);\n      console.log(\"Locale passed:::::::\"+locale);\n\n    createPdfBinary(\n      key,\n      formatConfigByFile,\n      entityIds,\n      formatconfig,\n      successCallback,\n      errorCallback,\n      tenantId,\n      starttime,\n      totalobjectcount,\n      userid,\n      documentType,\n      moduleName\n    ).catch((err) => {\n      logger.error(err.stack || err);\n      errorCallback({\n        message: \"error occurred in createPdfBinary call: \" + (typeof err === \"string\") ?\n          err :\n          err.message,\n      });\n    });\n  }\n};\nconst updateBorderlayout = (formatconfig) => {\n  formatconfig.content = formatconfig.content.map((item) => {\n    if (\n      item.hasOwnProperty(\"layout\") &&\n      typeof item.layout === \"object\" &&\n      Object.keys(item.layout).length === 0\n    ) {\n      item.layout = borderLayout;\n    }\n    return item;\n  });\n  return formatconfig;\n};\n\n/**\n *\n * @param {*} variableTovalueMap - key, value map. Keys are variable defined in data config\n * and value is their corresponding values. Map will be used by Moustache template engine\n * @param {*} formatconfig -format config read from formatconfig file\n */\nexport const fillValues = (variableTovalueMap, formatconfig) => {\n  let input = JSON.stringify(formatconfig).replace(/\\\\/g, \"\");\n  \n  //console.log(variableTovalueMap);\n  //console.log(mustache.render(input, variableTovalueMap).replace(/\"\"/g,\"\\\"\").replace(/\"\\[/g,\"\\[\").replace(/\\]\"/g,\"\\]\").replace(/\\]\\[/g,\"\\],\\[\").replace(/\"\\{/g,\"\\{\").replace(/\\}\"/g,\"\\}\"));\n  let output = JSON.parse(\n    mustache\n      .render(input, variableTovalueMap)\n      .replace(/\"\"/g, '\\\"\"')\n      //.replace(/\\\\/g, \"\")\n      .replace(/\"\\[/g, \"[\")\n      .replace(/\\]\"/g, \"]\")\n      .replace(/\\]\\[/g, \"],[\")\n      .replace(/\"\\{/g, \"{\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\t/g, \"\\\\t\")      \n  );\n  return output;\n};\n\n/**\n * generateQRCodes-function to geneerate qrcodes\n * moduleObject-current module object from request body\n * dataconfig- data config read from dataconfig of module\n */\nconst generateQRCodes = async (\n  moduleObject,\n  dataconfig,\n  variableTovalueMap\n) => {\n  let qrcodeMappings = getValue(\n    jp.query(dataconfig, \"$.DataConfigs.mappings.*.mappings.*.qrcodeConfig.*\"),\n    [],\n    \"$.DataConfigs.mappings.*.mappings.*.qrcodeConfig.*\"\n  );\n\n  for (var i = 0, len = qrcodeMappings.length; i < len; i++) {\n    let qrmapping = qrcodeMappings[i];\n    let varname = qrmapping.variable;\n    let qrtext = mustache.render(qrmapping.value, variableTovalueMap);\n\n    let qrCodeImage = await QRCode.toDataURL(qrtext);\n    variableTovalueMap[varname] = qrCodeImage;\n  }\n};\n\nconst handleDerivedMapping = (dataconfig, variableTovalueMap) => {\n  let derivedMappings = getValue(\n    jp.query(dataconfig, \"$.DataConfigs.mappings.*.mappings.*.derived.*\"),\n    [],\n    \"$.DataConfigs.mappings.*.mappings.*.derived.*\"\n  );\n\n  for (var i = 0, len = derivedMappings.length; i < len; i++) {\n    let mapping = derivedMappings[i];\n    let expression = mustache\n      .render(\n        mapping.formula.replace(/-/g, \" - \").replace(/\\+/g, \" + \"),\n        variableTovalueMap\n      )\n      .replace(/NA/g, \"0\");\n    variableTovalueMap[mapping.variable] = Function(`'use strict'; return (${expression})`)();\n  }\n};\n\nconst validateRequest = (req, res, key, tenantId, requestInfo) => {\n  let errorMessage = \"\";\n  if (key == undefined || key.trim() === \"\") {\n    errorMessage += \" key is missing,\";\n  }\n  if (tenantId == undefined || tenantId.trim() === \"\") {\n    errorMessage += \" tenantId is missing,\";\n  }\n  if (requestInfo == undefined) {\n    errorMessage += \" requestInfo is missing,\";\n  }\n  if (requestInfo && requestInfo.userInfo == undefined) {\n    errorMessage += \" userInfo is missing,\";\n  }\n  if (formatConfigMap[key] == undefined || dataConfigMap[key] == undefined) {\n    errorMessage += ` no config found for key ${key}`;\n  }\n  if (res && errorMessage !== \"\") {\n    res.status(400);\n    res.json({\n      message: errorMessage,\n      ResponseInfo: requestInfo,\n    });\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst prepareBegin = async (\n  key,\n  req,\n  requestInfo,\n  returnFileInResponse,\n  formatconfig,\n  dataconfig\n) => {\n  var baseKeyPath = get(dataconfig, \"DataConfigs.baseKeyPath\");\n  var entityIdPath = get(dataconfig, \"DataConfigs.entityIdPath\");\n  if (baseKeyPath == null) {\n    logger.error(\"baseKeyPath is absent in config\");\n    throw {\n      message: `baseKeyPath is absent in config`\n    };\n  }\n  return await prepareBulk(\n    key,\n    dataconfig,\n    formatconfig,\n    req,\n    baseKeyPath,\n    requestInfo,\n    returnFileInResponse,\n    entityIdPath\n  );\n};\n\nconst handlelogic = async (\n  key,\n  formatObject,\n  moduleObject,\n  dataconfig,\n  isCommonTableBorderRequired,\n  requestInfo\n) => {\n  let variableTovalueMap = {};\n  //direct mapping service\n  await Promise.all([\n    directMapping(\n      moduleObject,\n      dataconfig,\n      variableTovalueMap,\n      requestInfo,\n      unregisteredLocalisationCodes\n    ),\n    //external API mapping\n    externalAPIMapping(\n      key,\n      moduleObject,\n      dataconfig,\n      variableTovalueMap,\n      requestInfo,\n      unregisteredLocalisationCodes\n    ),\n  ]);\n  await generateQRCodes(moduleObject, dataconfig, variableTovalueMap);\n  handleDerivedMapping(dataconfig, variableTovalueMap);\n  formatObject = fillValues(variableTovalueMap, formatObject);\n  if (isCommonTableBorderRequired === true)\n    formatObject = updateBorderlayout(formatObject);\n  return formatObject;\n};\n\n// const prepareSingle=(key)=>{\n//   handlelogic();\n// }\n\nconst prepareBulk = async (\n  key,\n  dataconfig,\n  formatconfig,\n  req,\n  baseKeyPath,\n  requestInfo,\n  returnFileInResponse,\n  entityIdPath\n) => {\n  let isCommonTableBorderRequired = get(\n    dataconfig,\n    \"DataConfigs.isCommonTableBorderRequired\"\n  );\n  let formatObjectArrayObject = [];\n  let formatConfigByFile = [];\n  let totalobjectcount = 0;\n  let entityIds = [];\n  let countOfObjectsInCurrentFile = 0;\n  let moduleObjectsArray = getValue(\n    jp.query(req.body || req, baseKeyPath),\n    [],\n    baseKeyPath\n  );\n  if (Array.isArray(moduleObjectsArray) && moduleObjectsArray.length > 0) {\n    totalobjectcount = moduleObjectsArray.length;\n    for (var i = 0, len = moduleObjectsArray.length; i < len; i++) {\n      let moduleObject = moduleObjectsArray[i];\n      let entityKey = getValue(\n        jp.query(moduleObject, entityIdPath),\n        [null],\n        entityIdPath\n      );\n      entityIds.push(entityKey[0]);\n\n      let formatObject = JSON.parse(JSON.stringify(formatconfig));\n\n      // Multipage pdf, each pdf from new page\n      if (\n        formatObjectArrayObject.length != 0 &&\n        formatObject[\"content\"][0] !== undefined\n      ) {\n        formatObject[\"content\"][0][\"pageBreak\"] = \"before\";\n      }\n\n      /////////////////////////////\n      formatObject = await handlelogic(\n        key,\n        formatObject,\n        moduleObject,\n        dataconfig,\n        isCommonTableBorderRequired,\n        requestInfo\n      );\n\n      formatObjectArrayObject.push(formatObject[\"content\"]);\n      countOfObjectsInCurrentFile++;\n      if (\n        (!returnFileInResponse &&\n          countOfObjectsInCurrentFile == maxPagesAllowed) ||\n        i + 1 == len\n      ) {\n        let formatconfigCopy = JSON.parse(JSON.stringify(formatconfig));\n        \n        let locale = requestInfo.msgId.split('|')[1];\n        if(!locale)\n          locale = envVariables.DEFAULT_LOCALISATION_LOCALE;\n\n        if(defaultFontMapping[locale] != 'default'){\n          formatconfigCopy.defaultStyle.font = defaultFontMapping[locale];\n        }\n\n        formatconfigCopy[\"content\"] = formatObjectArrayObject;\n        formatConfigByFile.push(formatconfigCopy);\n        formatObjectArrayObject = [];\n        countOfObjectsInCurrentFile = 0;\n      }\n    }\n    return [formatConfigByFile, totalobjectcount, entityIds];\n  } else {\n    logger.error(\n      `could not find property of type array in request body with name ${baseKeyPath}`\n    );\n    throw {\n      message: `could not find property of type array in request body with name ${baseKeyPath}`,\n    };\n  }\n};\nexport default app;"]}